#include <bits/stdc++.h>
using namespace std;

// Recursive Approach (Memoization)
int matrixChainRec(int i, int j, vector<int>& arr, vector<vector<int>>& dp) {
    if (i == j) return 0;  // Single matrix, no multiplication needed

    if (dp[i][j] != -1) return dp[i][j];

    int minCost = INT_MAX;
    for (int k = i; k < j; k++) {
        int cost = (arr[i - 1] * arr[k] * arr[j]) 
                   + matrixChainRec(i, k, arr, dp) 
                   + matrixChainRec(k + 1, j, arr, dp);
        minCost = min(minCost, cost);
    }
    return dp[i][j] = minCost;
}

// Tabulation Approach (Bottom-Up)
int matrixChainTabulation(vector<int>& arr, int n) {
    vector<vector<int>> dp(n, vector<int>(n, 0));

    for (int len = 2; len < n; len++) {
        for (int i = 1; i < n - len + 1; i++) {
            int j = i + len - 1;
            dp[i][j] = INT_MAX;
            for (int k = i; k < j; k++) {
                int cost = dp[i][k] + dp[k + 1][j] + (arr[i - 1] * arr[k] * arr[j]);
                dp[i][j] = min(dp[i][j], cost);
            }
        }
    }
    return dp[1][n - 1];
}

// Space Optimized Approach (DP with rolling arrays)
int matrixChainSpaceOptimized(vector<int>& arr, int n) {
    vector<int> dp(n, 0), prev(n, 0);

    for (int len = 2; len < n; len++) {
        for (int i = 1; i < n - len + 1; i++) {
            int j = i + len - 1;
            dp[j] = INT_MAX;
            for (int k = i; k < j; k++) {
                int cost = prev[k] + prev[j] + (arr[i - 1] * arr[k] * arr[j]);
                dp[j] = min(dp[j], cost);
            }
        }
        prev = dp;
    }
    return prev[n - 1];
}

int main() {
    int n;
    cout << "Enter the number of matrices (size of array): ";
    cin >> n;

    vector<int> arr(n);
    cout << "Enter the dimensions array: ";
    for (int i = 0; i < n; i++) {
        cin >> arr[i];
    }

    // Recursive Approach (Memoization)
    vector<vector<int>> dp(n, vector<int>(n, -1));
    cout << "Minimum Cost (Recursive): " << matrixChainRec(1, n - 1, arr, dp) << endl;

    // Tabulation Approach
    cout << "Minimum Cost (Tabulation): " << matrixChainTabulation(arr, n) << endl;

    // Space Optimized Approach
    cout << "Minimum Cost (Space Optimized): " << matrixChainSpaceOptimized(arr, n) << endl;

    return 0;
}
