#include <bits/stdc++.h>
using namespace std;

// Recursive Approach (Memoization)
int burstRec(int i, int j, vector<int> &nums, vector<vector<int>> &dp) {
    if (i > j) return 0;  // No balloons to burst

    if (dp[i][j] != -1) return dp[i][j];

    int maxCoins = INT_MIN;
    for (int ind = i; ind <= j; ind++) {
        int coins = (nums[i - 1] * nums[ind] * nums[j + 1]) 
                   + burstRec(i, ind - 1, nums, dp) 
                   + burstRec(ind + 1, j, nums, dp);
        maxCoins = max(maxCoins, coins);
    }

    return dp[i][j] = maxCoins;
}

// Tabulation Approach (Bottom-Up DP)
int burstTabulation(vector<int> &nums) {
    int n = nums.size();
    nums.insert(nums.begin(), 1);
    nums.push_back(1);

    vector<vector<int>> dp(n + 2, vector<int>(n + 2, 0));

    for (int i = n; i >= 1; i--) {
        for (int j = i; j <= n; j++) {
            int maxCoins = INT_MIN;
            for (int ind = i; ind <= j; ind++) {
                int coins = (nums[i - 1] * nums[ind] * nums[j + 1]) 
                           + dp[i][ind - 1] + dp[ind + 1][j];
                maxCoins = max(maxCoins, coins);
            }
            dp[i][j] = maxCoins;
        }
    }
    return dp[1][n];
}

// Space Optimization is NOT possible in this case since we require a full 2D DP table.

int main() {
    int n;
    cout << "Enter the number of balloons: ";
    cin >> n;

    vector<int> nums(n);
    cout << "Enter the balloon values: ";
    for (int i = 0; i < n; i++) {
        cin >> nums[i];
    }

    // Recursive Approach (Memoization)
    vector<vector<int>> dp(n + 1, vector<int>(n + 1, -1));
    cout << "Maximum Coins (Recursive): " << burstRec(1, n, nums, dp) << endl;

    // Tabulation Approach
    cout << "Maximum Coins (Tabulation): " << burstTabulation(nums) << endl;

    return 0;
}
